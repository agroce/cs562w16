In this new library that I have been test is red-black tree. After the TSTL random testing, I didn't find any big problems, means no bug has founded right now. I have test few functions in this library, which contains the red-black tree's initialization, insert, delete, rotate and search. Now I am about to introduce the method that I used in testing all these functions. 
First of all, we need to create a new tree for us in order to proceed the rest of the operations, so we call redblack.RedBlackTree() to do initialization and we got a tree structure, then we let the random tester continue to insert random integers into the tree structure. Besides, we also need to make sure whether the operations success or not, in this case, we can first define whether the inserted number is exist or not by using .search function, if the integer that we just insert is in tree structure, the insert function is successful run, in verse, we can also using the similar way to test delete function, when we delete one node from red-black tree( or a subtree of the whole tree), we could then detect the number of remain nodes by using .size() if the missing size of the tree equal to the size before it deleted, Or delete a element that actually do not exist from a empty tree, we will see if there shown some of error that indicate we cannot eliminate the element anymore. In this step, we can moce on to the others functions, for example, the minimum and the maximun functions.
Due to the reason that red-blcak in basically is also a binary sort tree, but it is not a strictly AVL tree, because it do not require to be balance, but it actually will satisfied with the similar criteria because of the properties of red-black tree, we will introduce this part later on. In this case, we can check if the this library fit the criteria of sort tree that the node with less integer set in left subtree, the node of bigger number have to set on the right subtree. So all we need to do this to check the return value of the function minimun(or function maximun) is equal to the left-most leaf, and the right-most leaf is the biggest value in this whole tree, we write a new program that will record all values in tree and find the biggest and smallest in array, then we compare this two with another program that detect the left-most tree, if the result is match we can prove that we get the correct result. 
If I estimate about the final result of test this library, I think I may not able to find any error on it, because the whole structure is short and the function is pretty complete, so we may find some place that may not be very convenient but the functions will finish the job we assign. For example, the input type of the tree can only be integers, the the way that we call the function is a little bit awkward. So I expect that we could refine some of the function and find little bug in it.
At the end, the coverage of this new test file is 36.7% which is not make people satisfy with, 117 branches and 87 statement are covered. This low level of coverage is due to the way that I test has not go through as many as the library's capacity. As I mentioned from first two paragraphs, There only seven basic operations we have been done with it, there are still have inorder_walk() and reverse, which may call the basic operations and cover more branches in this library, essentially, the revse() will adjust the position of the nodes in order to make it fullfill the criteria of the red-black tree, the root have to be color black and the leaf node also, the red color node cannot be cosequence in ray. So I planning to make more effort on this direction and test two big call in order to increase the coverage. the .out file is also uploaded to the directory.
