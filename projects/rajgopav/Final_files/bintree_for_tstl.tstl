@from bintrees import BinaryTree

<@
def displayTree(tree):
        list = []
        printHelper(tree.root, list)
        return list

def printHelper(node, list):
        if node == None:
                return
        list.append(node.key)
        printHelper(node.left,list)
        printHelper(node.right,list)

def traversal(k, v):
    print k, v

def maxNode(root):
    if root is None:
        return float("-inf")

    maxleft = maxNode(root.left)
    maxright = maxNode(root.right)

    return max(root.key, maxleft, maxright)

def minNode(root):
    if root is None:
        return float("inf")

    minleft = minNode(root.left)
    minright = minNode(root.right)

    return min(root.key, minleft, minright)

def bst(tree):
    if tree is None:
        return True

    node = tree._root

    if node is None:
        return True

    if (maxNode(node.left) <= node.key <= minNode(node.right) and bst(node.left) and bst(node.right)):
        return True
    else:
        return False
@>

source: bintree.py

log: 1 <binarytree>

#pools are where TSTL stores state of the SUT
pools:
    <int> 20
    <letter> 2
    <ascii> 2
    <binarytree> 1
    <list> 1

#initialization
actions:
<ascii> := <[65..91]>
<int> := <[1..20]>
<letter> := chr(<ascii>)
<binarytree>  := BinaryTree()
<list> := []

#~<bt>.insert(<key>,<val>); ~<list>.append(<val>)

#len(~<bt>) > 5 -> ~<bt>.__contains__(<key>) and (~<bt>.__getitem__(<key>) in ~<list>) -> \
    #values = (~<bt>.__getitem__(<key>)); ~<bt>.remove(<key>); ~<list>.remove(values);

~<binarytree>.insert(<int>,<letter>) and bst(~<binarytree>)
~<list>.append(<letter>)
~<binarytree>.get(<letter>)
~<binarytree>.__len__()
~<binarytree>.__len__() > 0 -> \
    ~<binarytree>.__max__()
~<binarytree>.__len__() > 0 -> \
    ~<binarytree>.__min__()
~<binarytree>.__len__() > 0 -> \
    ~<binarytree>.max_item()
~<binarytree>.__len__() > 0 -> \
    ~<binarytree>.min_item()
~<binarytree>.__len__() > 4 -> \
    print ~<binarytree>.nlargest(<letter>)
~<binarytree>.__len__() > 4 -> \
    print ~<binarytree>.nsmallest(<letter>)
~<binarytree>.__len__() > 0 -> \
    ~<binarytree>.max_key() -> \
        ~<binarytree>.pop_max()
~<binarytree>.__len__() > 0 -> \
    ~<binarytree>.min_key() -> \
        ~<binarytree>.pop_min()
~<binarytree>.get(<letter>) > 0 -> ~<binarytree>.__contains__(<letter>) and (~<binarytree>.get(<letter>) in ~<list>) -> \
    values = (~<binarytree>.get(<letter>)); ~<binarytree>.remove(<letter>) and bst(<binarytree>); ~<list>.remove(values);
~<binarytree>.is_empty()
~<binarytree>.clear()
~<binarytree>.__len__() > 0 -> ~<binarytree>.foreach(traversal,0)

compare: get
compare: __len__
compare: __max__
compare: __min__