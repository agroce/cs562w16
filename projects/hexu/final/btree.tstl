@import Interfaces
@from BTrees.OOBTree import OOBTree
@from BTrees.check import *
<@
def check_update(bt,key,value):
    if bt.get(key) == value :
       return 1
    else: 
       return 0

def check_max(bt,max_key):
    max = 0
    for k in bt.keys():
    	if max < k :
	   max = k
    if max == max_key :

       print  "*************************************************************   The MaxKey in " +str(list(bt.keys()))  + " is " +str(max_key)
       return 1
    else:
       return 0

def check_min(bt,min_key):
    min = bt.maxKey();
    for k in bt.keys():
    	 if k < min :
	      min = k
    if min == min_key:
       print "**************************************************************   The MinKey in " +str(list(bt.keys())) + " is " + str(min_key)
       return 1
    else:
       return 0

def test_after_reduce(sut): 
    sut.setLog(0)
@>
source: Interfaces.py

pools:
       <int>    3
       <char>   3
       <string> 3
       <key>    3
       <value>  3
       <btree>  3
       <maxKey>      1
       <minKey>      1
logs:
	1 <key>
	1 <value>
	1 list(<btree>.items())	
	
	POST 1 <key>
	POST 1 <value>
	POST 1 list(<btree>.items())

actions:
	<int> := <[1..100]>

    <char> :=<["a","b","c","d"]>
	<string> := <char>
	~<string> += <char>

    

	<key> := <string>
	<key> := <int>
        <key> := (<int>,<string>)
	<value> := <string>
	<value> := <int>
        <value> := (<string>,<int>)
	
  	<btree> := OOBTree()
        <value> := <btree>


	~<btree>.insert(<key>,<value>) =>  check(<btree,1>) == None \
	 and  (len(<btree,1>) == pre<(len(<btree,1>))> + 1 or <btree,1>.has_key(<key,1>) > 0 ) 
 	
	~<btree>.update({<key>:<value>}) => check(<btree,1>) == None \
	 and  (len(<btree,1>) == pre<(len(<btree,1>))> + 1 or len(<btree,1>) == pre<(len(<btree,1>))>) \
	 and check_update(<btree,1>,<key,1>,<value,1>) == 1
	 	 
	~<btree>.pop(<key>,0) => check(<btree,1>) == None \
	 and  (len(<btree,1>) == pre<(len(<btree,1>))> -1 or <btree,1>.pop(<key,1>,0) == 0) \
	 and <btree,1>.has_key(<key,1>) == 0

    	~<btree> != None and <btree,1>.__nonzero__() == True  -> <maxKey> := <btree,1>.maxKey() => check_max(<btree,1>,<maxKey,1>) == 1
        ~<btree> != None and <btree,1>.__nonzero__() == True  -> <minKey> := <btree,1>.minKey() => check_min(<btree,1>,<minKey,1>) == 1 
	 