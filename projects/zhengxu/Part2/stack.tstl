@from algorithms.data_structures import stack

pool: <int> 5
pool: <stack> 3

<int> := <[1..20]> 

<stack> := stack.Stack()

~<stack>.add(~<int>) => \
(<int,1> in <stack,1>.stack_list) \
and (<stack,1>.size() == (pre<(<stack,1>.size())>+1))

~<stack>.is_empty() == 0 -> \
sl = <stack,1>.stack_list; last = sl[len(sl)-1];\
pop = ~<stack,1>.remove() => \
last == pop \
and (<stack,1>.size() == (pre<(<stack,1>.size())>-1))