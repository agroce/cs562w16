# this file defines a test harness for sqlparse
# NOTE: detailed instructions on installing sqlparse are given in README.md

@import sqlparse
@from sqlparse import tokens
@from sqlparse import compat

# helper python code
<@

# pretty print string for parse tree
def pretty(parsed):
  def helper(parsed, i = 0):
    result = '%s%s \'%s\'\n' % (' ' * (2 * i), parsed._get_repr_name(), parsed._get_repr_value())
    if parsed.is_group():
      for t in filter(lambda t: not t.is_whitespace(), parsed.tokens):
        result += helper(t, i + 1)
    return result
  return '\n' + helper(parsed)

# set logging level after reduce
def test_after_reduce(sut): 
  sut.setLog(1)

@>

# source for code coverage
source: sqlparse.py

# pools
pool: <sep>    3

pool: <name>   3
pool: <col>    3
pool: <alias>  3

pool: <num>    3
pool: <val>    3
pool: <expr>   3

pool: <cols>   3
pool: <which>  3
pool: <tab>    3

pool: <select> 1
pool: <parsed> 1

# properties
property: <parsed>.get_type() == 'SELECT' 

# logging
log: POST 1 pretty(<parsed>)

<sep>     := <[' ', '\t', '\n', '\r']> 
<sep>     := '/*' + <sep> + '*/' 
~<sep>    += <sep>

<name>    := <['a'..'c']> 
<name>    := <['A'..'C']> 
~<name>   += <name>
<col>     := <name>
<col>     := <name> + '.' + <name>
<alias>   := '' 
<alias>   := 'AS' + <sep> + <name>

<num>     := <['0'..'9']> 
<num,1> [0] != '0' -> ~<num> += <num>
<val>     := 'NULL' 
<val>     := '\"' + <name> + '\"' 
<val>     := <num>
<val>     := <col>
<expr>    := <val> + ' == ' + <val>
<expr>    := <val> + ' <> ' + <val>
<expr>    := 'NOT ' + <expr>
~<expr>   += ' AND ' + <expr>
~<expr>   += ' OR ' + <expr>

<cols>    := '*' 
<cols>    := <col> + <sep> + <alias>
<cols,2> [0] != '*' -> ~<cols> += ',' + <sep> + <cols>

<tab>     := <name>
# removing this guard can lead to an assertion error
<select,1> [-1] != ';' -> <tab> := '(' + <sep> + <select> + <sep> + ')' 
~<tab>    += <tab> + <sep> + <alias>

<select>  := 'SELECT' + <sep> + <cols> + <sep> + 'FROM' + <sep> + <tab> + 'WHERE' + <sep> + <expr>
<select>  := 'SELECT' + <sep> + <cols> + <sep> + 'FROM' + <sep> + <tab>
# removing this guard can lead to an assertion error
<select,1> [-1] != ';' -> ~<select> += ';' 

# after action, check that parse tree equals statement string
<parsed>  := sqlparse.parse(<select>)[0] => compat.u(<parsed,1>) == <select,1>
