@import random
@import singly_linked_listmodified

<@

def display(self):
        list = []
        node = self.head
        while node != None :
                list.append(node.data)
                node = node.next
        print list

def multadd(list):
        n = random.randint(100,500)

        for i in range(n):
                if list.search(i) == False:
                        list.add(i)
                       


def whileempty(link):
	if link.head == None:
		return True
	else:
		return False

@>

pool:	<int> 2
pool:	<slist> 1

	
<slist> := singly_linked_listmodified.SinglyLinkedList()
	
	
<int> := <[0..500]>

#Insert element when key not in list and check length and search function	
~<slist,1>.search(<int,1>) == False -> ~<slist>.add(<int>) => pre<(<slist,1>.length())> + 1 == ~<slist,1>.length() and ~<slist,1>.search(<int,1>) == True

#delete element when key in list and check length and search functiom
~<slist,1>.search(<int,1>) == True -> ~<slist>.remove(<int>) => pre<(~<slist,1>.length())> - 1 == ~<slist,1>.length() and ~<slist,1>.search(<int,1>) == False

#while list is empty check return of remove. This has been modified has to return none from the original source
whileempty(~<slist,1>) -> checkval = ~<slist>.remove(<int>) => checkval == None

#while list is empty check return of search. None condition changed to False , as not handled in original source
whileempty(~<slist,1>) -> checkval = ~<slist>.search(<int>) => checkval == False	


~<slist>.length() > 10 -> print "List length is:", ~<slist,1>.length()
