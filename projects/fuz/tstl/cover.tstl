@from Equation import Expression
# define fucntions used in tstl

pools:
    <varname> 3
    <realnum> 3
    <compnum> 3

    <edoe> 3
    <doe>  3
    <expr> 3

actions:
    #vars and nums
    <varname> := <['x0','x1','x2','x3','x4','x5','x6','x7','x8','x9']>

    <realnum> := 1.0
    <realnum> = <realnum> + 1.0
    <realnum> = - <realnum>
    <realnum,1> != 0 -> <realnum> = <realnum> / <realnum,1>

    <compnum> := '(' + str(~<realnum>) + '+' + str(~<realnum>) + 'j' + ')'

    #operators,'/','^'
    <edoe> := <['+','-','*']>

    <doe>  := <['sin','cos']>

    #expression string
    <expr> := <varname>
    <expr> := str(<realnum>)
    <expr> := <compnum>

    <expr,2> != <expr,3>, <expr,3> != 0, <expr,3> !=0+0j -> <expr> = <expr> + <edoe> + <expr>
    <expr> = <doe> + '(' + <expr> + ')'

    #<string> := '"' + <compnum> + '"' + ',' + "[" + "'x0','x1','x2','x3','x4','x5','x6','x7','x8','x9'" + "]"

    #if the expression is wrong, there should be an typeerror(I have test some incorrect code. And the expression should never be enterpreted as NONE)
    assert( Expression(str(<expr>),["x0","x1","x2","x3","x4","x5","x6","x7","x8","x9"]) != "")

    print Expression(str(<expr>),["x0","x1","x2","x3","x4","x5","x6","x7","x8","x9"])
    print Expression(str(<expr>),["x0","x1","x2","x3","x4","x5","x6","x7","x8","x9"])(1,2,3,4,5,6,7,8,9,1)

