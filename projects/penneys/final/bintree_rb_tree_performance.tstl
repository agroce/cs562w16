@from bintrees import RBTree
@import myDict
@import math
@import time

<@

def insertTree(rbtree, letter, int):
	rbtree.insert(letter, int)
	
def insertDict(dict, letter, int):
	dict.add(letter, int)

def writeResults(insertcalls, inserttotaltime, filename):
	if insertcalls > 0:
		f = open(filename, 'a')
		f.write(str(inserttotaltime / insertcalls) + '\n')
		f.close()
	
@>

pool: <int> 20
pool: <rbtree> 1
pool: <mydict> 1
pool: <ascii> 2
pool: <letter> 2
pool: <rbtreeinsertcalls> 1
pool: <rbtreeinserttotaltime> 1
pool: <dictinsertcalls> 1
pool: <dictinserttotaltime> 1


<rbtreeinsertcalls> := 0
<rbtreeinserttotaltime> := 0
<dictinsertcalls> := 0
<dictinserttotaltime> := 0

<ascii> := <[65..91]>
<letter> := chr(<ascii>)
<int> := <[1..20]>

<rbtree> := RBTree()
<mydict> := myDict.Dict()

<rbtreeinsertcalls> += 1; start = time.time(); insertTree(~<rbtree>, <letter>, <int>); <rbtreeinserttotaltime> = <rbtreeinserttotaltime> + (time.time() - start); writeResults(<rbtreeinsertcalls>, <rbtreeinserttotaltime>, 'rbtreePerformance.txt');
<dictinsertcalls> += 1; start = time.time(); insertDict(~<mydict>, <letter>, <int>); <dictinserttotaltime> = <dictinserttotaltime> + (time.time() - start); writeResults(<dictinsertcalls>, <dictinserttotaltime>, 'dictPerformance.txt');

