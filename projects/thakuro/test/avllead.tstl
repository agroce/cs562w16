@import avltree
@import math
@import time
@import collections
@import bstree




<@
def heightchk(avltree):
    h = tree.tree_height()
    l = len(tree.preorder())
    if (l == 0):
       return True
    m = math.log(l,2)
    
    assert(pre<(tree.preorder())> == tree.preorder())
    return h <= (m + 1)



def test_after_reduce(sut): 
    sut.setLog(0)
@>


source: avltree.py

log: 1 <avltree>.preorder()
log: POST 1 <avltree>.preorder()

pool: <int> 3
pool: <avltree> 3 REF

property: heightchk(<avltree>) 


#<key> := <[1..10]>
#<val> := <[1..10]>
<int> := <[1..20]>
<avltree> := avltree.AVLTree()
#<avltree>.insert(<key>,<val>) => <avl,1> is_valid() == True
#<avltree>.delete(<key,1>) => <avltree,1>.contains (<key,1>) = False
#<avltree>.delete(<key>,<val>);
#<avl,1> contains(<key,1>) == True
~<avltree>.insert(<int>) => \
   (len(<avltree,1>.preorder()) == pre<(len(<avltree,1>.preorder()))>+1) \
   or pre<(<avltree,1>.find(<int,1>))>
~<avltree>.delete(<int>) => \
   (len(<avltree,1>.preorder()) == pre<(len(<avltree,1>.preorder()))>-1) \
   or not pre<((<avltree,1>.find(<int,1>)))>
<avltree>.preorder()
~<avltree> == ~<avltree>
len(<avltree,1>.preorder()) > 5 -> <avltree>.display()



