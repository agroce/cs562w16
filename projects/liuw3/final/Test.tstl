@import LinkedList_Single 
@import math
@import time

<@


def length(headvalue):
    H = headvalue
    count = 0
    while H:
        count = count+1
        H = H.next
    return count
@>


<@

def Append(headvalue):
	p = headvalue
	size = length(headvalue)
	while size > 1:
		size = size-1
		p = p.next
	return p.data
@>


<@


def P_value(head,i):
    ptr = head
    size = length(head)
    currentIndex=0
    if (i < size):
        while ( currentIndex < i):
            currentIndex = currentIndex + 1                 
            ptr = ptr.next
        return ptr.data
    else:
        return None
@>


<@
def D_Index(self, list, M):
    p1 = self.head
    p2 = list.head
    index = 0;

    while (p1 and p2):
        if(index == M):
            p2 = p2.next

        if(p1.data == p2.data):
            p1 = p1.next
            p2 = p2.next
            index = index + 1
        else:
            return False

    return True
@>

<@
def D_datadele(self, list, data):
    p1 = self.head
    p2 = list.head
 
    while (p1 and p2):
        while (p2.data == data):
            p2 = p2.next

        if(p1.data == p2.data):
            p1 = p1.next
            p2 = p2.next
        else:
            return False

    return True
@>

<@
def Dele_V(head, data):
        ptr= head
        index = 0

        while ptr:
            if (ptr.data == data):
                return index
            ptr = ptr.next
            index = index + 1
        return -1
@>





source: LinkedList_Single.py


pools:
	<INT> 1
	<LIST> 1
	<VALUE> 1 
	<CHAR> 1


actions:
	<INT>:=<[1..10]>
	<VALUE> := <[10..70]>
	<CHAR> := <[1..20]>

	<LIST>:=LinkedList_Single.LinkedList()

	#insert
	~<LIST>.insert(<INT>) => (length(<LIST,1>.head) == PRE<(length(<LIST,1>.head))>+1) and (P_value(<LIST,1>.head, 0) == <INT>)

	# append
	~<LIST>.append(<INT>) => (length(<LIST,1>.head) == PRE<(length(<LIST,1>.head))>+1) and (<INT> == Append(<LIST,1>.head))
	
	# returnIndex
	V = ~<LIST>.returnIndex(<VALUE>) => ( V == None )
	
	~<LIST>.insert(<INT>); V = ~<LIST>.returnIndex(<INT>) => ( V == 0 )


	# updateIndex
	~<LIST>.insert(<VALUE>); ~<LIST>.updateIndex(0,<INT>) => ( P_value(<LIST,1>.head, 0) != <VALUE> )

	~<LIST>.append(<VALUE>); V = ( length(<LIST>.head) - 1) ; ~<LIST>.updateIndex(V,<INT>) => ( P_value(<LIST,1>.head, 0) != <VALUE> )


	# deleteIndex
	
	<INT> < length(~<LIST,1>.head) -> list = ~<LIST>.copyList(); V = ~<LIST>.deleteIndex(<INT>) => ( V == True ) \
											and (length(<LIST,1>.head) == PRE<(length(<LIST,1>.head))>-1)
	
	# insertBeforeIndex

	<INT> <= length(~<LIST,1>.head) -> V = ~<LIST>.insertBeforeIndex(<INT>, <CHAR>) => (V == True) \
											and (length(<LIST,1>.head) == PRE<(length(<LIST,1>.head))>+1)

	# insertAfterIndex

	<INT> < length(~<LIST,1>.head) -> V = ~<LIST>.insertAfterIndex(<INT>, <CHAR>) => (V == True) \
											and (length(<LIST,1>.head) == PRE<(length(<LIST,1>.head))>+1)

    # deleteData

    Dele_V(~<LIST>.head, <INT>) != -1 -> list = ~<LIST>.copyList(); V = Dele_V(<LIST>.head, <INT>); ~<LIST>.deleteData(<INT>) => \
    													(length(<LIST,1>.head) == PRE<(length(<LIST,1>.head))>-1) and \
    													(D_Index(~<LIST>, list, V) == True) 
    Dele_V(~<LIST>.head, <INT>) == -1 -> V = ~<LIST>.deleteData(<INT>) => (V == False) \
    											     and (length(<LIST,1>.head) == PRE<(length(<LIST,1>.head))>)
   	# deleteAllData

	Dele_V(~<LIST>.head, <INT>) != -1 -> list = ~<LIST>.copyList(); V = ~<LIST>.deleteAllData(<INT>) => \
   													(V == True) and \
   													(D_datadele(~<LIST,1>, list, <INT>) == True) 




   	# deleteList

   	~<LIST>.deleteList() => (length(<LIST,1>.head) == 0)

   	# findMthToLastNode

   	<INT> <= length(~<LIST>.head) ->  INDEX = length(<LIST>.head) - <INT>; V = ~<LIST>.findMthToLastNode(<INT>) => \
									    ( P_value(<LIST,1>.head, INDEX) == V)


