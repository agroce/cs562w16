@import math
@import time
@import BST

# @ indicates raw python code, such as imports, and is usually not parsed by TSTL, but available for use in testing
<@
def test(self):
        if not self._root[0] or self._root[0][2] < self._sort_key:
            if not self._root[1] or self._root[0][2] > self._sort_key:
                return True
        else: return False
@>

# pools are where TSTL stores state of the SUT; REF indicates a pool that is mirrored by a reference implementation
source: BST.py
pool: <int> 10
pool: <tree> 6
 
# initializes        
<int> := <[1..20]>
<tree> := BST.BinarySearchTree()

# insert an int into an avl tree.
 
 
# => (<tree>.maximum() == <int,1>)
# tree._extreme_node(_RIGHT)[_VALUE])
~<tree>.insert(<int>) => (<tree,1>._len == pre<(<tree,1>._len)>+1)
#~<tree>.insert(<int>) => (test(<tree>) == True)
~<tree>.pop_max() => ((<tree,1>._len == pre<(<tree,1>._len)>-1) or (pre<(<tree,1>._len)> == 0))

~<tree>.insert(<int>) => (<tree,1>._len == pre<(<tree,1>._len)>+1)

~<tree>.pop_min() => ((<tree,1>._len == pre<(<tree,1>._len)>-1) or (pre<(<tree,1>._len)> == 0))

#~<tree>.insert(<int>) => (test_extreme(<tree>,1) == tree._extreme_node(1)[_VALUE])